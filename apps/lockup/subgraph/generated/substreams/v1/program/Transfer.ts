// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Transfer {
  static encode(message: Transfer, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.instructionProgram);

    writer.uint32(16);
    writer.uint64(message.instructionIndex);

    writer.uint32(26);
    writer.string(message.transactionHash);

    writer.uint32(34);
    writer.string(message.from);

    writer.uint32(42);
    writer.string(message.to);

    writer.uint32(50);
    writer.string(message.fromOwner);

    writer.uint32(58);
    writer.string(message.toOwner);

    writer.uint32(66);
    writer.string(message.nftMint);

    writer.uint32(72);
    writer.uint64(message.amount);
  }

  static decode(reader: Reader, length: i32): Transfer {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transfer();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.instructionProgram = reader.string();
          break;

        case 2:
          message.instructionIndex = reader.uint64();
          break;

        case 3:
          message.transactionHash = reader.string();
          break;

        case 4:
          message.from = reader.string();
          break;

        case 5:
          message.to = reader.string();
          break;

        case 6:
          message.fromOwner = reader.string();
          break;

        case 7:
          message.toOwner = reader.string();
          break;

        case 8:
          message.nftMint = reader.string();
          break;

        case 9:
          message.amount = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  instructionProgram: string;
  instructionIndex: u64;
  transactionHash: string;
  from: string;
  to: string;
  fromOwner: string;
  toOwner: string;
  nftMint: string;
  amount: u64;

  constructor(
    instructionProgram: string = "",
    instructionIndex: u64 = 0,
    transactionHash: string = "",
    from: string = "",
    to: string = "",
    fromOwner: string = "",
    toOwner: string = "",
    nftMint: string = "",
    amount: u64 = 0
  ) {
    this.instructionProgram = instructionProgram;
    this.instructionIndex = instructionIndex;
    this.transactionHash = transactionHash;
    this.from = from;
    this.to = to;
    this.fromOwner = fromOwner;
    this.toOwner = toOwner;
    this.nftMint = nftMint;
    this.amount = amount;
  }
}
