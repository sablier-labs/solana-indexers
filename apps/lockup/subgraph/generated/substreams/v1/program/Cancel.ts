// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Cancel {
  static encode(message: Cancel, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.instructionProgram);

    writer.uint32(16);
    writer.uint64(message.instructionIndex);

    writer.uint32(26);
    writer.string(message.transactionHash);

    writer.uint32(32);
    writer.uint64(message.refunded);

    writer.uint32(42);
    writer.string(message.sender);

    writer.uint32(50);
    writer.string(message.senderAta);

    writer.uint32(58);
    writer.string(message.depositTokenMint);

    writer.uint32(66);
    writer.string(message.depositTokenProgram);

    writer.uint32(74);
    writer.string(message.nftMint);

    writer.uint32(82);
    writer.string(message.nftData);
  }

  static decode(reader: Reader, length: i32): Cancel {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Cancel();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.instructionProgram = reader.string();
          break;

        case 2:
          message.instructionIndex = reader.uint64();
          break;

        case 3:
          message.transactionHash = reader.string();
          break;

        case 4:
          message.refunded = reader.uint64();
          break;

        case 5:
          message.sender = reader.string();
          break;

        case 6:
          message.senderAta = reader.string();
          break;

        case 7:
          message.depositTokenMint = reader.string();
          break;

        case 8:
          message.depositTokenProgram = reader.string();
          break;

        case 9:
          message.nftMint = reader.string();
          break;

        case 10:
          message.nftData = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  instructionProgram: string;
  instructionIndex: u64;
  transactionHash: string;
  refunded: u64;
  sender: string;
  senderAta: string;
  depositTokenMint: string;
  depositTokenProgram: string;
  nftMint: string;
  nftData: string;

  constructor(
    instructionProgram: string = "",
    instructionIndex: u64 = 0,
    transactionHash: string = "",
    refunded: u64 = 0,
    sender: string = "",
    senderAta: string = "",
    depositTokenMint: string = "",
    depositTokenProgram: string = "",
    nftMint: string = "",
    nftData: string = ""
  ) {
    this.instructionProgram = instructionProgram;
    this.instructionIndex = instructionIndex;
    this.transactionHash = transactionHash;
    this.refunded = refunded;
    this.sender = sender;
    this.senderAta = senderAta;
    this.depositTokenMint = depositTokenMint;
    this.depositTokenProgram = depositTokenProgram;
    this.nftMint = nftMint;
    this.nftData = nftData;
  }
}
