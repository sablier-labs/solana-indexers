// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Initialize {
  static encode(message: Initialize, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.instructionProgram);

    writer.uint32(16);
    writer.uint64(message.instructionIndex);

    writer.uint32(26);
    writer.string(message.transactionHash);

    writer.uint32(34);
    writer.string(message.signer);

    writer.uint32(42);
    writer.string(message.treasuryPda);
  }

  static decode(reader: Reader, length: i32): Initialize {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Initialize();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.instructionProgram = reader.string();
          break;

        case 2:
          message.instructionIndex = reader.uint64();
          break;

        case 3:
          message.transactionHash = reader.string();
          break;

        case 4:
          message.signer = reader.string();
          break;

        case 5:
          message.treasuryPda = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  instructionProgram: string;
  instructionIndex: u64;
  transactionHash: string;
  signer: string;
  treasuryPda: string;

  constructor(
    instructionProgram: string = "",
    instructionIndex: u64 = 0,
    transactionHash: string = "",
    signer: string = "",
    treasuryPda: string = ""
  ) {
    this.instructionProgram = instructionProgram;
    this.instructionIndex = instructionIndex;
    this.transactionHash = transactionHash;
    this.signer = signer;
    this.treasuryPda = treasuryPda;
  }
}
