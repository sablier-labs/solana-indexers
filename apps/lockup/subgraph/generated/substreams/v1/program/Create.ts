// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Create {
  static encode(message: Create, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.instructionProgram);

    writer.uint32(16);
    writer.uint64(message.instructionIndex);

    writer.uint32(26);
    writer.string(message.transactionHash);

    writer.uint32(32);
    writer.int64(message.startTime);

    writer.uint32(40);
    writer.int64(message.cliffTime);

    writer.uint32(48);
    writer.int64(message.endTime);

    writer.uint32(56);
    writer.int64(message.totalDuration);

    writer.uint32(64);
    writer.int64(message.cliffDuration);

    writer.uint32(72);
    writer.uint64(message.depositedAmount);

    writer.uint32(80);
    writer.uint64(message.initialAmount);

    writer.uint32(88);
    writer.uint64(message.cliffAmount);

    writer.uint32(96);
    writer.bool(message.cancelable);

    writer.uint32(106);
    writer.string(message.sender);

    writer.uint32(114);
    writer.string(message.senderAta);

    writer.uint32(122);
    writer.string(message.recipient);

    writer.uint32(130);
    writer.string(message.depositTokenMint);

    writer.uint32(138);
    writer.string(message.depositTokenProgram);

    writer.uint32(144);
    writer.uint32(message.depositTokenDecimals);

    writer.uint32(154);
    writer.string(message.nftMint);

    writer.uint32(162);
    writer.string(message.nftData);

    writer.uint32(170);
    writer.string(message.nftRecipientAta);

    writer.uint32(178);
    writer.string(message.nftTokenProgram);

    writer.uint32(186);
    writer.string(message.salt);
  }

  static decode(reader: Reader, length: i32): Create {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Create();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.instructionProgram = reader.string();
          break;

        case 2:
          message.instructionIndex = reader.uint64();
          break;

        case 3:
          message.transactionHash = reader.string();
          break;

        case 4:
          message.startTime = reader.int64();
          break;

        case 5:
          message.cliffTime = reader.int64();
          break;

        case 6:
          message.endTime = reader.int64();
          break;

        case 7:
          message.totalDuration = reader.int64();
          break;

        case 8:
          message.cliffDuration = reader.int64();
          break;

        case 9:
          message.depositedAmount = reader.uint64();
          break;

        case 10:
          message.initialAmount = reader.uint64();
          break;

        case 11:
          message.cliffAmount = reader.uint64();
          break;

        case 12:
          message.cancelable = reader.bool();
          break;

        case 13:
          message.sender = reader.string();
          break;

        case 14:
          message.senderAta = reader.string();
          break;

        case 15:
          message.recipient = reader.string();
          break;

        case 16:
          message.depositTokenMint = reader.string();
          break;

        case 17:
          message.depositTokenProgram = reader.string();
          break;

        case 18:
          message.depositTokenDecimals = reader.uint32();
          break;

        case 19:
          message.nftMint = reader.string();
          break;

        case 20:
          message.nftData = reader.string();
          break;

        case 21:
          message.nftRecipientAta = reader.string();
          break;

        case 22:
          message.nftTokenProgram = reader.string();
          break;

        case 23:
          message.salt = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  instructionProgram: string;
  instructionIndex: u64;
  transactionHash: string;
  startTime: i64;
  cliffTime: i64;
  endTime: i64;
  totalDuration: i64;
  cliffDuration: i64;
  depositedAmount: u64;
  initialAmount: u64;
  cliffAmount: u64;
  cancelable: bool;
  sender: string;
  senderAta: string;
  recipient: string;
  depositTokenMint: string;
  depositTokenProgram: string;
  depositTokenDecimals: u32;
  nftMint: string;
  nftData: string;
  nftRecipientAta: string;
  nftTokenProgram: string;
  salt: string;

  constructor(
    instructionProgram: string = "",
    instructionIndex: u64 = 0,
    transactionHash: string = "",
    startTime: i64 = 0,
    cliffTime: i64 = 0,
    endTime: i64 = 0,
    totalDuration: i64 = 0,
    cliffDuration: i64 = 0,
    depositedAmount: u64 = 0,
    initialAmount: u64 = 0,
    cliffAmount: u64 = 0,
    cancelable: bool = false,
    sender: string = "",
    senderAta: string = "",
    recipient: string = "",
    depositTokenMint: string = "",
    depositTokenProgram: string = "",
    depositTokenDecimals: u32 = 0,
    nftMint: string = "",
    nftData: string = "",
    nftRecipientAta: string = "",
    nftTokenProgram: string = "",
    salt: string = ""
  ) {
    this.instructionProgram = instructionProgram;
    this.instructionIndex = instructionIndex;
    this.transactionHash = transactionHash;
    this.startTime = startTime;
    this.cliffTime = cliffTime;
    this.endTime = endTime;
    this.totalDuration = totalDuration;
    this.cliffDuration = cliffDuration;
    this.depositedAmount = depositedAmount;
    this.initialAmount = initialAmount;
    this.cliffAmount = cliffAmount;
    this.cancelable = cancelable;
    this.sender = sender;
    this.senderAta = senderAta;
    this.recipient = recipient;
    this.depositTokenMint = depositTokenMint;
    this.depositTokenProgram = depositTokenProgram;
    this.depositTokenDecimals = depositTokenDecimals;
    this.nftMint = nftMint;
    this.nftData = nftData;
    this.nftRecipientAta = nftRecipientAta;
    this.nftTokenProgram = nftTokenProgram;
    this.salt = salt;
  }
}
