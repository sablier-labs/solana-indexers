// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Cancel } from "./Cancel";
import { Create } from "./Create";
import { Renounce } from "./Renounce";
import { Withdraw } from "./Withdraw";
import { WithdrawMax } from "./WithdrawMax";
import { Transfer } from "./Transfer";

export class Data {
  static encode(message: Data, writer: Writer): void {
    const cancelList = message.cancelList;
    for (let i: i32 = 0; i < cancelList.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Cancel.encode(cancelList[i], writer);
      writer.ldelim();
    }

    const createList = message.createList;
    for (let i: i32 = 0; i < createList.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Create.encode(createList[i], writer);
      writer.ldelim();
    }

    const renounceList = message.renounceList;
    for (let i: i32 = 0; i < renounceList.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Renounce.encode(renounceList[i], writer);
      writer.ldelim();
    }

    const withdrawList = message.withdrawList;
    for (let i: i32 = 0; i < withdrawList.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Withdraw.encode(withdrawList[i], writer);
      writer.ldelim();
    }

    const withdrawMaxList = message.withdrawMaxList;
    for (let i: i32 = 0; i < withdrawMaxList.length; ++i) {
      writer.uint32(42);
      writer.fork();
      WithdrawMax.encode(withdrawMaxList[i], writer);
      writer.ldelim();
    }

    const splTransferList = message.splTransferList;
    for (let i: i32 = 0; i < splTransferList.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Transfer.encode(splTransferList[i], writer);
      writer.ldelim();
    }

    writer.uint32(56);
    writer.uint64(message.blockNumber);

    writer.uint32(64);
    writer.int64(message.blockTimestamp);
  }

  static decode(reader: Reader, length: i32): Data {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Data();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.cancelList.push(Cancel.decode(reader, reader.uint32()));
          break;

        case 2:
          message.createList.push(Create.decode(reader, reader.uint32()));
          break;

        case 3:
          message.renounceList.push(Renounce.decode(reader, reader.uint32()));
          break;

        case 4:
          message.withdrawList.push(Withdraw.decode(reader, reader.uint32()));
          break;

        case 5:
          message.withdrawMaxList.push(
            WithdrawMax.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.splTransferList.push(
            Transfer.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.blockNumber = reader.uint64();
          break;

        case 8:
          message.blockTimestamp = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  cancelList: Array<Cancel>;
  createList: Array<Create>;
  renounceList: Array<Renounce>;
  withdrawList: Array<Withdraw>;
  withdrawMaxList: Array<WithdrawMax>;
  splTransferList: Array<Transfer>;
  blockNumber: u64;
  blockTimestamp: i64;

  constructor(
    cancelList: Array<Cancel> = [],
    createList: Array<Create> = [],
    renounceList: Array<Renounce> = [],
    withdrawList: Array<Withdraw> = [],
    withdrawMaxList: Array<WithdrawMax> = [],
    splTransferList: Array<Transfer> = [],
    blockNumber: u64 = 0,
    blockTimestamp: i64 = 0
  ) {
    this.cancelList = cancelList;
    this.createList = createList;
    this.renounceList = renounceList;
    this.withdrawList = withdrawList;
    this.withdrawMaxList = withdrawMaxList;
    this.splTransferList = splTransferList;
    this.blockNumber = blockNumber;
    this.blockTimestamp = blockTimestamp;
  }
}
