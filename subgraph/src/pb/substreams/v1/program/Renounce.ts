// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Renounce {
  static encode(message: Renounce, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.trxHash);

    writer.uint32(18);
    writer.string(message.acctSender);

    writer.uint32(26);
    writer.string(message.acctStream);

    writer.uint32(34);
    writer.string(message.acctSenderAta);

    writer.uint32(42);
    writer.string(message.acctRecipientAta);
  }

  static decode(reader: Reader, length: i32): Renounce {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Renounce();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.trxHash = reader.string();
          break;

        case 2:
          message.acctSender = reader.string();
          break;

        case 3:
          message.acctStream = reader.string();
          break;

        case 4:
          message.acctSenderAta = reader.string();
          break;

        case 5:
          message.acctRecipientAta = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  trxHash: string;
  acctSender: string;
  acctStream: string;
  acctSenderAta: string;
  acctRecipientAta: string;

  constructor(
    trxHash: string = "",
    acctSender: string = "",
    acctStream: string = "",
    acctSenderAta: string = "",
    acctRecipientAta: string = ""
  ) {
    this.trxHash = trxHash;
    this.acctSender = acctSender;
    this.acctStream = acctStream;
    this.acctSenderAta = acctSenderAta;
    this.acctRecipientAta = acctRecipientAta;
  }
}
