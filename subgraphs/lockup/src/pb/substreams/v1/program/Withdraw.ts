// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";

export class Withdraw {
  static encode(message: Withdraw, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.trxHash);

    writer.uint32(16);
    writer.uint64(message.amount);

    writer.uint32(26);
    writer.string(message.acctSigner);

    writer.uint32(34);
    writer.string(message.acctStream);

    writer.uint32(42);
    writer.string(message.acctMint);

    writer.uint32(50);
    writer.string(message.acctSenderAta);

    writer.uint32(58);
    writer.string(message.acctRecipientAta);

    writer.uint32(66);
    writer.string(message.acctTreasuryPda);

    writer.uint32(74);
    writer.string(message.acctTreasuryAta);

    writer.uint32(82);
    writer.string(message.acctTokenProgram);
  }

  static decode(reader: Reader, length: i32): Withdraw {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Withdraw();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.trxHash = reader.string();
          break;

        case 2:
          message.amount = reader.uint64();
          break;

        case 3:
          message.acctSigner = reader.string();
          break;

        case 4:
          message.acctStream = reader.string();
          break;

        case 5:
          message.acctMint = reader.string();
          break;

        case 6:
          message.acctSenderAta = reader.string();
          break;

        case 7:
          message.acctRecipientAta = reader.string();
          break;

        case 8:
          message.acctTreasuryPda = reader.string();
          break;

        case 9:
          message.acctTreasuryAta = reader.string();
          break;

        case 10:
          message.acctTokenProgram = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  trxHash: string;
  amount: u64;
  acctSigner: string;
  acctStream: string;
  acctMint: string;
  acctSenderAta: string;
  acctRecipientAta: string;
  acctTreasuryPda: string;
  acctTreasuryAta: string;
  acctTokenProgram: string;

  constructor(
    trxHash: string = "",
    amount: u64 = 0,
    acctSigner: string = "",
    acctStream: string = "",
    acctMint: string = "",
    acctSenderAta: string = "",
    acctRecipientAta: string = "",
    acctTreasuryPda: string = "",
    acctTreasuryAta: string = "",
    acctTokenProgram: string = ""
  ) {
    this.trxHash = trxHash;
    this.amount = amount;
    this.acctSigner = acctSigner;
    this.acctStream = acctStream;
    this.acctMint = acctMint;
    this.acctSenderAta = acctSenderAta;
    this.acctRecipientAta = acctRecipientAta;
    this.acctTreasuryPda = acctTreasuryPda;
    this.acctTreasuryAta = acctTreasuryAta;
    this.acctTokenProgram = acctTokenProgram;
  }
}
